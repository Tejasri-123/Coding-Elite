class pair{
    int row,col,count;
    pair(int row,int col,int count){
        this.row= row;
        this.col = col;
        this.count = count;
    }

}
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        return bfs(grid,visited,0,0);

        
    }
    
    int bfs(int[][] grid,boolean[][] visited,int rw,int cl){
        int n = grid.length;
        int m = grid[0].length;
        Queue<pair> queue = new LinkedList<>();
        queue.add(new pair(rw,cl,1));
        visited[rw][cl]=true;
        while(!queue.isEmpty()){
            pair curr = queue.poll();
            int row = curr.row;
            int col = curr.col;
            int count = curr.count;

            if(grid[row][col]!=0 || grid[n-1][m-1]!=0){
                return -1;
            }
            if(row==n-1 && col==m-1){
                return count;
            }
            
            for(int i=-1;i<=1;i++){
                for(int j = -1;j<=1;j++){
                    int r = row+i;
                    int c = col+j;
                    if(r>=0 && r<n && c>=0 && c<m){
                        if(grid[r][c] == 0 && !visited[r][c]){ 

                            visited[r][c]=true;
                            queue.add(new pair(r,c,count+1));
                        }
                    }
                }
            }
            
        }
        return -1;


    }
}
