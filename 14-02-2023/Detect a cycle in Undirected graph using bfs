class Pair{
    int node,parent;
    Pair(int node,int parent){
        
        this.node = node;
        this.parent = parent;
    }
}
class Solution {
    
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visit  = new boolean[V];
        for(int i=0;i<V;i++){
            if(!visit[i]){
                if(check(V,i,adj,visit)) 
                    return true;
            }
        }
        return false;
        
        
        // Code here
    }
    boolean check(int V,int s,ArrayList<ArrayList<Integer>> adj,boolean[] visit){
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(s,-1));
        visit[s] = true;
        while(!queue.isEmpty()){
            Pair temp = queue.poll();
            int node = temp.node;
            int parent = temp.parent;
           for(int neigh : adj.get(node)){
               if(!visit[neigh]){
                   visit[neigh]=true;
                   queue.add(new Pair(neigh,node));
               }
               else if(parent!=neigh){
                   return true;
                   
               }
           }
        }
        return false;
    }
    
}
