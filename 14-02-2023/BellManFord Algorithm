class Solution {
    static int[] bellman_ford(int V, ArrayList<ArrayList<Integer>> edges, int S) {
        int[] distance = new int[V];
        for(int i=0;i<V;i++){
            distance[i] = (int)(1e8);
        }
        distance[S]=0;
        for(int i=0;i<V-1;i++){
            for(ArrayList<Integer> elem : edges){ 
            int u = elem.get(0);
            int v = elem.get(1);
            int wt = elem.get(2);
            if(distance[u]!=(int)(1e8) && distance[u]+wt<distance[v]){ 
                distance[v] = distance[u]+wt;
            }
        }
        
    }
    for(ArrayList<Integer> elem : edges){ 
            int u = elem.get(0);
            int v = elem.get(1);
            int wt = elem.get(2);
            if(distance[u]!=Integer.MAX_VALUE && distance[u]+wt<distance[v]){
                int[] arr = new int[1];
                arr[0]=-1;
                return arr;
            }
        }
            return distance;
    }
            
}
