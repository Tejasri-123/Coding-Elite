class pair{
    int row,col,step;
    pair(int row,int col ,int step){
        this.row=row;
        this.col=col;
        this.step=step;
    }
}

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        int[][] mat1 = new int[n][m];
        boolean[][] visit = new boolean[n][m];
        Queue<pair> queue = new LinkedList<>();
        for(int i = 0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==0){
                    visit[i][j]=true;
                    queue.add(new pair(i,j,0));
                }
            }
        }
        
          

        while(!queue.isEmpty()){
            
            pair temp = queue.poll();
            int row = temp.row;
            int col = temp.col;
            int step = temp.step;
             
            int[] drow = {-1,0,1,0};
            int[] dcol = {0,1,0,-1};

            mat1[row][col]=step;
            for(int i=0;i<4;i++){
                int rc = row+drow[i];
                int cl = col+dcol[i];
                if(rc>=0 && rc<n && cl>=0 && cl<m){
                    if(!visit[rc][cl]){ 
                        visit[rc][cl]=true;
                        queue.add(new pair(rc,cl,step+1));
                    }
                }
            }
        }
        return mat1;
    } 
}
