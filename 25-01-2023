1.Symmetric Tree 

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null){
            return true;
        }

        return isSame(root.left,root.right);
    }

        public boolean isSame(TreeNode left, TreeNode right){
            if(left != null && right!=null && left.val==right.val){
                return isSame(left.left,right.right) && isSame(left.right,right.left);
                 }
                 return left == right;
        }
        
        
    
}

.........................................

2.Balanced Binary Tree

class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null){
            return true;
        }
        else if (Math.abs(height(root.left) - height(root.right)) > 1) {
            return false;
        }
        else{ return isBalanced(root.left) && isBalanced(root.right);
        }
    }
    public int height(TreeNode root){
        if(root==null){
            return 0;
        }
        int left = height(root.left);
        int right = height(root.right);
        return Math.max(left,right)+1;

    }
}

...........................................

3.Least Common Ancestor

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null){
            return null;
        }
        if(root.val == p.val || root.val == q.val){
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);
        if(left!=null && right!=null){
            return root;
        }
        if(left==null){
            return right;
        }
        if(right==null){
            return left;
        }
        return null;

        
    }
    
   .............................................
    
    
   4.Diameter of Binary Tree
   
   class Solution {
    int max1 = 0;
    public int Width(TreeNode root){
        if(root == null){
            return 0;
        }
        int lt = Width(root.left);
        int rt = Width(root.right);
        max1=Math.max(max1,lt+rt);
        return Math.max(lt,rt)+1;
        }
    public int diameterOfBinaryTree(TreeNode root) {

        Width(root);
        return max1;
    }
}



   
   

