class Pair{
       int node;
       int wt;
       Pair(int node,int wt){
           this.node=node;
           this.wt=wt;
       }
   }
class Solution
{
  
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        PriorityQueue<Pair> queue = new PriorityQueue<Pair>((x,y) -> x.wt-y.wt);
        int[] arr = new int[V];
        Arrays.fill(arr,Integer.MAX_VALUE);
        
        arr[S]=0;
        queue.add(new Pair(S,0));
        while(!queue.isEmpty()){
            Pair temp = queue.poll();
            int v = temp.node;
            int dis = temp.wt;
            for(int i=0;i<adj.get(v).size();i++){
                int neigh = adj.get(v).get(i).get(0);
                int weigh = adj.get(v).get(i).get(1);
                if(arr[neigh]>dis+weigh){
                    arr[neigh]=dis+weigh;
                
                queue.add(new Pair(neigh,arr[neigh]));
                
                }
            }
        }
        
        return arr;
    }
}

